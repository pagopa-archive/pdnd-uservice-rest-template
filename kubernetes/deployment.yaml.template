apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{name}}
  name: {{name}}
  namespace: {{name}}
spec:
  replicas: 3
  selector:
    matchLabels:
      app: {{name}}
  template:
    metadata:
      labels:
        app: {{name}}
        actorSystemName: {{name}}
    spec:
      imagePullSecrets:
        - name: regcred
      volumes:
        - name: application-conf
          secret:
            secretName: application.conf
            defaultMode: 420
      containers:
        - name: {{name}}
          image: {{repository}}/services/{{name}}:{{version}}
          command: ["bin/{{name}}"]
          args: ["-Dconfig.file=etc/application.conf", "-Dconfig.override_with_env_vars=true"]
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              path: /ready
              port: management
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 30
          livenessProbe:
            httpGet:
              path: "/alive"
              port: management
            periodSeconds: 10
            failureThreshold: 5
            initialDelaySeconds: 30
          ports:
            - name: management
              containerPort: 8558
              protocol: TCP
            - name: http
              containerPort: 8088
              protocol: TCP
            - name: monitoring
              containerPort: 9095
              protocol: TCP
          securityContext:
            runAsUser: 1001
            allowPrivilegeEscalation: false
          env:
            - name: CASSANDRA_HOST
              valueFrom:
                secretKeyRef:
                  name: cassandra
                  key: CASSANDRA_HOST
            - name: CASSANDRA_USR
              valueFrom:
                secretKeyRef:
                  name: cassandra
                  key: CASSANDRA_USR
            - name: CASSANDRA_PSW
              valueFrom:
                secretKeyRef:
                  name: cassandra
                  key: CASSANDRA_PSW
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REQUIRED_CONTACT_POINT_NR
              value: "3"
          volumeMounts:
            - name: application-conf
              mountPath: /opt/docker/etc
---
apiVersion: v1
kind: Service
metadata:
  labels:
    prometheus: "true"
  name: {{name}}
  namespace: {{name}}
spec:
  type: ClusterIP
  ports:
    - port: 8088
      targetPort: http
      protocol: TCP
      name: http
    - port: 9095
      targetPort: monitoring
      protocol: TCP
      name: monitoring
  selector:
    app: {{name}}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader
  namespace: {{name}}
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: {{name}}
subjects:
# Note the `name` line below. The first default refers to the namespace. The second refers to the service account name.
# For instance, `name: system:serviceaccount:myns:default` would refer to the default service account in namespace `myns`
- kind: User
  name: system:serviceaccount:{{name}}:default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io
