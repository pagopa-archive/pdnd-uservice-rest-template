package {{invokerPackage}}

import akka.http.scaladsl.Http
import akka.http.scaladsl.server.Route
{{#apiInfo}}{{#apis}}{{#operations}}import {{package}}.{{classname}}
{{/operations}}{{/apis}}{{/apiInfo}}
import akka.http.scaladsl.server.Directives._
import akka.actor.ActorSystem
import akka.http.scaladsl.model.{ContentTypes, HttpEntity, HttpMethods, HttpRequest}
import akka.stream.scaladsl.Sink
import org.openapi4j.core.validation.ValidationException
import org.openapi4j.operation.validator.model.Request.Method
import org.openapi4j.operation.validator.model.impl.{Body, DefaultRequest}
import org.openapi4j.operation.validator.validation.RequestValidator
import org.openapi4j.parser.OpenApi3Parser
import com.github.mustachejava.DefaultMustacheFactory

import scala.concurrent.Await
import scala.concurrent.duration.Duration
import scala.concurrent.duration._
import scala.jdk.CollectionConverters._
import scala.util.{Failure, Success, Try}
import java.io.{BufferedWriter, File, FileOutputStream, FileWriter, StringWriter}
import scala.collection.mutable

class Controller({{#apiInfo}}{{#apis}}{{#operations}}{{classVarName}}: {{classname}}{{^-last}}, {{/-last}}{{/operations}}{{/apis}}{{/apiInfo}}, validationExceptionToRoute: Option[ValidationException => Route] = None)(implicit system: ActorSystem) {

        val interfaceVersion = buildinfo.BuildInfo.interfaceVersion
        private val mf = new DefaultMustacheFactory
        val writer =
        mf.compile("interface-specification.yml").execute(new StringWriter(), mutable.HashMap("version" -> interfaceVersion).asJava).asInstanceOf[StringWriter]
        writer.flush()
        writer.close()
        private val tmpFile = File.createTempFile("tmp", "interface-specification.yml")
        tmpFile.deleteOnExit()
        val w = new BufferedWriter(new FileWriter(tmpFile))
        w.write(writer.toString)
        w.close()
        private val api = new OpenApi3Parser().parse(tmpFile, true)
        private val validator = new RequestValidator(api)
        private val strictnessTimeout = FiniteDuration({{entityStrictnessTimeout}}, SECONDS)
        private val validationsWhitelist: List[String] = List("swagger-ui", "build-info")

      def validationFunction(httpRequest: HttpRequest)(route: Route): Route = {
        if (!(validationExceptionToRoute.isDefined && !validationsWhitelist.exists(httpRequest.uri.toString.contains(_))))
          route
        else {
          val builder = new DefaultRequest.Builder(httpRequest.uri.toString(), httpRequest.method match {
            case HttpMethods.POST =>
              Method.POST
            case HttpMethods.GET =>
              Method.GET
            case HttpMethods.PUT =>
              Method.PUT
            case HttpMethods.DELETE =>
              Method.DELETE
            case HttpMethods.HEAD =>
              Method.HEAD
            case HttpMethods.OPTIONS =>
              Method.OPTIONS
            case HttpMethods.PATCH =>
              Method.PATCH
            case HttpMethods.TRACE =>
              Method.TRACE  
            case _ =>
              Method.GET
          })
          val entity = httpRequest.entity.asInstanceOf[HttpEntity.Strict]
          val contentType = entity.getContentType().toString
          val requestHeaders = ("Content-Type", contentType) :: httpRequest.
            headers.
            map(
              header =>
                (header.name(), header.value)
            ).
            toList

          val headers = (("Content-Type", contentType) :: requestHeaders).map(p => (p._1, Seq(p._2).asJava: java.util.Collection[String])).toMap.asJava

          val validatingRequest = builder.body(Body.from(entity.data.utf8String)).headers(headers).build()
            Try(validator.validate(validatingRequest)) match {
               case Failure(e: ValidationException) =>
                 validationExceptionToRoute.fold[Route](complete((400, e.getMessage)))(_ (e))
               case Failure(e) =>
                 throw e
               case Success(_) =>
                 route
              }
          }
      }

  /**
  * Exposes build information of this project.
  */
  def getBuildInfo: Route =
    path("{{projectName}}" / "build-info") {
      get {
        complete(HttpEntity(ContentTypes.`application/json`, buildinfo.BuildInfo.toJson))
      }
   }

     def swaggerRoute: Route =
         pathPrefix("{{projectName}}" / interfaceVersion / "swagger") {
           getFromResourceDirectory("swagger-ui") ~ getFromFile(tmpFile)
     }

  lazy val routes: Route = getBuildInfo ~ swaggerRoute ~ pathPrefix("{{projectName}}" / interfaceVersion) {
    toStrictEntity(strictnessTimeout) {
      extractRequest {
        request =>
          validationFunction(request){
            {{#apiInfo}}{{#apis}}{{#operations}}{{classVarName}}.route {{^-last}} ~ {{/-last}}{{/operations}}{{/apis}}{{/apiInfo}}
        }
      }
    }
  }

}
